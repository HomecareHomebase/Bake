/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/pingOperationsMappers";
import { HCHBServicesPropertyServiceAPIv1Context } from "../hCHBServicesPropertyServiceAPIv1Context";

/** Class representing a PingOperations. */
export class PingOperations {
  private readonly client: HCHBServicesPropertyServiceAPIv1Context;

  /**
   * Create a PingOperations.
   * @param {HCHBServicesPropertyServiceAPIv1Context} client Reference to the service client.
   */
  constructor(client: HCHBServicesPropertyServiceAPIv1Context) {
    this.client = client;
  }

  /**
   * @summary ping endpoint that returns "true"
   * @param [options] The optional parameters
   * @returns Promise<Models.PingOperationsPingResponse>
   */
  ping(options?: msRest.RequestOptionsBase): Promise<Models.PingOperationsPingResponse>;
  /**
   * @param callback The callback
   */
  ping(callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  ping(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
  ping(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.PingOperationsPingResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      pingOperationSpec,
      callback) as Promise<Models.PingOperationsPingResponse>;
  }

  /**
   * @summary ping endpoint that returns the user and lpid
   * @param [options] The optional parameters
   * @returns Promise<Models.PingOperationsPingUserResponse>
   */
  pingUser(options?: msRest.RequestOptionsBase): Promise<Models.PingOperationsPingUserResponse>;
  /**
   * @param callback The callback
   */
  pingUser(callback: msRest.ServiceCallback<string>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  pingUser(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  pingUser(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.PingOperationsPingUserResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      pingUserOperationSpec,
      callback) as Promise<Models.PingOperationsPingUserResponse>;
  }

  /**
   * @param [options] The optional parameters
   * @returns Promise<Models.PingOperationsPingUserWrappedResponse>
   */
  pingUserWrapped(options?: msRest.RequestOptionsBase): Promise<Models.PingOperationsPingUserWrappedResponse>;
  /**
   * @param callback The callback
   */
  pingUserWrapped(callback: msRest.ServiceCallback<Models.ApiResponseString>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  pingUserWrapped(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApiResponseString>): void;
  pingUserWrapped(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApiResponseString>, callback?: msRest.ServiceCallback<Models.ApiResponseString>): Promise<Models.PingOperationsPingUserWrappedResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      pingUserWrappedOperationSpec,
      callback) as Promise<Models.PingOperationsPingUserWrappedResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const pingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Ping",
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Boolean"
        }
      }
    },
    default: {}
  },
  serializer
};

const pingUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Ping/User",
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const pingUserWrappedOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Ping/UserWrapped",
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApiResponseString
    },
    default: {}
  },
  serializer
};
