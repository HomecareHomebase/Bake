/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/propertyOperationsMappers";
import * as Parameters from "../models/parameters";
import { HCHBServicesPropertyServiceAPIv1Context } from "../hCHBServicesPropertyServiceAPIv1Context";

/** Class representing a PropertyOperations. */
export class PropertyOperations {
  private readonly client: HCHBServicesPropertyServiceAPIv1Context;

  /**
   * Create a PropertyOperations.
   * @param {HCHBServicesPropertyServiceAPIv1Context} client Reference to the service client.
   */
  constructor(client: HCHBServicesPropertyServiceAPIv1Context) {
    this.client = client;
  }

  /**
   * @param property
   * @param [options] The optional parameters
   * @returns Promise<Models.PropertyOperationsUpdateResponse>
   */
  update(property: Models.Property, options?: msRest.RequestOptionsBase): Promise<Models.PropertyOperationsUpdateResponse>;
  /**
   * @param property
   * @param callback The callback
   */
  update(property: Models.Property, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param property
   * @param options The optional parameters
   * @param callback The callback
   */
  update(property: Models.Property, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  update(property: Models.Property, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.PropertyOperationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        property,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PropertyOperationsUpdateResponse>;
  }

  /**
   * @param property
   * @param [options] The optional parameters
   * @returns Promise<Models.PropertyOperationsCreateResponse>
   */
  create(property: Models.Property, options?: msRest.RequestOptionsBase): Promise<Models.PropertyOperationsCreateResponse>;
  /**
   * @param property
   * @param callback The callback
   */
  create(property: Models.Property, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param property
   * @param options The optional parameters
   * @param callback The callback
   */
  create(property: Models.Property, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  create(property: Models.Property, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.PropertyOperationsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        property,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.PropertyOperationsCreateResponse>;
  }

  /**
   * @param id
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.PropertyOperationsReadResponse>
   */
  read(id: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PropertyOperationsReadResponse>;
  /**
   * @param id
   * @param name
   * @param callback The callback
   */
  read(id: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param id
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  read(id: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  read(id: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.PropertyOperationsReadResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        name,
        options
      },
      readOperationSpec,
      callback) as Promise<Models.PropertyOperationsReadResponse>;
  }

  /**
   * @param id
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.PropertyOperationsDeleteMethodResponse>
   */
  deleteMethod(id: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PropertyOperationsDeleteMethodResponse>;
  /**
   * @param id
   * @param name
   * @param callback The callback
   */
  deleteMethod(id: string, name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param id
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  deleteMethod(id: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.PropertyOperationsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.PropertyOperationsDeleteMethodResponse>;
  }

  /**
   * @param selectorFilterType
   * @param [options] The optional parameters
   * @returns Promise<Models.PropertyOperationsSearchResponse>
   */
  search(selectorFilterType: number, options?: Models.PropertyOperationsSearchOptionalParams): Promise<Models.PropertyOperationsSearchResponse>;
  /**
   * @param selectorFilterType
   * @param callback The callback
   */
  search(selectorFilterType: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param selectorFilterType
   * @param options The optional parameters
   * @param callback The callback
   */
  search(selectorFilterType: number, options: Models.PropertyOperationsSearchOptionalParams, callback: msRest.ServiceCallback<any>): void;
  search(selectorFilterType: number, options?: Models.PropertyOperationsSearchOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.PropertyOperationsSearchResponse> {
    return this.client.sendOperationRequest(
      {
        selectorFilterType,
        options
      },
      searchOperationSpec,
      callback) as Promise<Models.PropertyOperationsSearchResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/Properties",
  requestBody: {
    parameterPath: "property",
    mapper: {
      ...Mappers.Property,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Property
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    409: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/Properties",
  requestBody: {
    parameterPath: "property",
    mapper: {
      ...Mappers.Property,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Property
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const readOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Properties/{Name}/{Id}",
  urlParameters: [
    Parameters.id0,
    Parameters.name0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Property
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/Properties/{Name}/{Id}",
  urlParameters: [
    Parameters.id0,
    Parameters.name0
  ],
  responses: {
    200: {},
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const searchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Properties/Search",
  queryParameters: [
    Parameters.name1,
    Parameters.selectorFilterType,
    Parameters.selectors
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Property"
            }
          }
        }
      }
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};
