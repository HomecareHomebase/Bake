/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/certificateOperationsMappers";
import * as Parameters from "../models/parameters";
import { HCHBServicesPropertyServiceAPIv1Context } from "../hCHBServicesPropertyServiceAPIv1Context";

/** Class representing a CertificateOperations. */
export class CertificateOperations {
  private readonly client: HCHBServicesPropertyServiceAPIv1Context;

  /**
   * Create a CertificateOperations.
   * @param {HCHBServicesPropertyServiceAPIv1Context} client Reference to the service client.
   */
  constructor(client: HCHBServicesPropertyServiceAPIv1Context) {
    this.client = client;
  }

  /**
   * @param property
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOperationsUpdateResponse>
   */
  update(property: Models.Certificate, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOperationsUpdateResponse>;
  /**
   * @param property
   * @param callback The callback
   */
  update(property: Models.Certificate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param property
   * @param options The optional parameters
   * @param callback The callback
   */
  update(property: Models.Certificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  update(property: Models.Certificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOperationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        property,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.CertificateOperationsUpdateResponse>;
  }

  /**
   * @param property
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOperationsCreateResponse>
   */
  create(property: Models.Certificate, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOperationsCreateResponse>;
  /**
   * @param property
   * @param callback The callback
   */
  create(property: Models.Certificate, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param property
   * @param options The optional parameters
   * @param callback The callback
   */
  create(property: Models.Certificate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  create(property: Models.Certificate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOperationsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        property,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.CertificateOperationsCreateResponse>;
  }

  /**
   * @param version
   * @param id
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOperationsReadResponse>
   */
  read(version: string, id: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOperationsReadResponse>;
  /**
   * @param version
   * @param id
   * @param name
   * @param callback The callback
   */
  read(version: string, id: string, name: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param version
   * @param id
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  read(version: string, id: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  read(version: string, id: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOperationsReadResponse> {
    return this.client.sendOperationRequest(
      {
        version,
        id,
        name,
        options
      },
      readOperationSpec,
      callback) as Promise<Models.CertificateOperationsReadResponse>;
  }

  /**
   * @param version
   * @param id
   * @param name
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOperationsDeleteMethodResponse>
   */
  deleteMethod(version: string, id: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificateOperationsDeleteMethodResponse>;
  /**
   * @param version
   * @param id
   * @param name
   * @param callback The callback
   */
  deleteMethod(version: string, id: string, name: string, callback: msRest.ServiceCallback<string>): void;
  /**
   * @param version
   * @param id
   * @param name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(version: string, id: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  deleteMethod(version: string, id: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<string>, callback?: msRest.ServiceCallback<string>): Promise<Models.CertificateOperationsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        version,
        id,
        name,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.CertificateOperationsDeleteMethodResponse>;
  }

  /**
   * @param selectorFilterType
   * @param [options] The optional parameters
   * @returns Promise<Models.CertificateOperationsSearchResponse>
   */
  search(selectorFilterType: number, options?: Models.CertificateOperationsSearchOptionalParams): Promise<Models.CertificateOperationsSearchResponse>;
  /**
   * @param selectorFilterType
   * @param callback The callback
   */
  search(selectorFilterType: number, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param selectorFilterType
   * @param options The optional parameters
   * @param callback The callback
   */
  search(selectorFilterType: number, options: Models.CertificateOperationsSearchOptionalParams, callback: msRest.ServiceCallback<any>): void;
  search(selectorFilterType: number, options?: Models.CertificateOperationsSearchOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.CertificateOperationsSearchResponse> {
    return this.client.sendOperationRequest(
      {
        selectorFilterType,
        options
      },
      searchOperationSpec,
      callback) as Promise<Models.CertificateOperationsSearchResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/v1/Certificates",
  requestBody: {
    parameterPath: "property",
    mapper: {
      ...Mappers.Certificate,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    409: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/v1/Certificates",
  requestBody: {
    parameterPath: "property",
    mapper: {
      ...Mappers.Certificate,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const readOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Certificates/{Name}/{Id}/{Version}",
  urlParameters: [
    Parameters.version,
    Parameters.id0,
    Parameters.name0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Certificate
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/v1/Certificates/{Name}/{Id}/{Version}",
  urlParameters: [
    Parameters.version,
    Parameters.id0,
    Parameters.name0
  ],
  responses: {
    200: {},
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const searchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/v1/Certificates/Search",
  queryParameters: [
    Parameters.name1,
    Parameters.selectorFilterType,
    Parameters.selectors
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      }
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    404: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};
