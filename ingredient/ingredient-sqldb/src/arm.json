{
    "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "collation": {
            "type": "string"
        },
        "databaseName": {
            "type": "string"
        },
        "tier": {
            "type": "string"
        },
        "skuName": {
            "type": "string"
        },
        "maxSizeBytes": {
            "type": "int"
        },
        "serverName": {
            "type": "string"
        },
        "serverLocation": {
            "defaultValue" : "[resourceGroup().location]",
            "type": "string"
        },
        "sampleName": {
            "type": "string",
            "defaultValue": ""
        },
        "zoneRedundant": {
            "type": "bool",
            "defaultValue": false
        },
        "licenseType": {
            "type": "string",
            "defaultValue": ""
        },
        "readScaleOut": {
            "type": "string",
            "defaultValue": "Disabled"
        },
        "numberOfReplicas": {
            "type": "int",
            "defaultValue": 0
        },
        "minCapacity": {
            "type": "string",
            "defaultValue": ""
        },
        "autoPauseDelay": {
            "type": "string",
            "defaultValue": ""
        },
        "databaseTags": {
            "type": "object",
            "defaultValue": {}
        },
        "enableADS": {
            "type": "bool",
            "defaultValue": false
        },
        "enableVA": {
            "type": "bool",
            "defaultValue": false
        },
        "diagnosticsEnabled": {
            "type": "string",
            "defaultValue": "yes",
            "metadata": {
                "description": "Specifies whether to configure diagnostic settings to expose logs and metrics for consumption."
            }
        },
        "diagnosticsSettingName": {
            "type": "string",
            "defaultValue": "diagToEHN",
            "metadata": {
                "description": "Diagnostic setting name.  Most by unique for the resource."
            }
        },
        "diagnosticsEventHubResourceGroup": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The resource group of the Event Hub Namespace where diagnostics are sent."
            }
        },
        "diagnosticsEventHubNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The Event Hub Namespace where diagnostics are sent."
            }
        },
        "diagnosticsEventHubAuthorizationRule": {
            "type": "string",
            "defaultValue": "RootManageSharedAccessKey",
            "metadata": {
                "description": "The authorization rule to use for transmitting diagnostics."
            }
        }
    },
    "resources": [
        {
            "condition": "[parameters('enableVA')]",
            "apiVersion": "2016-01-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "location": "[parameters('serverLocation')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {}
        },
        {
            "type": "Microsoft.Sql/servers/databases",
            "apiVersion": "2017-10-01-preview",
            "location": "[parameters('serverLocation')]",
            "tags": "[parameters('databaseTags')]",
            "name": "[concat(parameters('serverName'), '/', parameters('databaseName'))]",
            "properties": {
                "collation": "[parameters('collation')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "sampleName": "[parameters('sampleName')]",
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "licenseType": "[parameters('licenseType')]",
                "readScale": "[parameters('readScaleOut')]",
                "readReplicaCount": "[parameters('numberOfReplicas')]",
                "minCapacity": "[parameters('minCapacity')]",
                "autoPauseDelay": "[parameters('autoPauseDelay')]"
            },
            "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('tier')]"
            },
            "resources": [
                {
                    "condition": "[equals(parameters('diagnosticsEnabled'), 'yes')]",
                    "type": "providers/diagnosticSettings",
                    "name": "[concat('Microsoft.Insights/', parameters('diagnosticsSettingName'))]",
                    "dependsOn": [                    
                    "[resourceId('Microsoft.Sql/servers/databases',parameters('serverName'), parameters('databaseName'))]"
                    ],
                    "apiVersion": "2017-05-01-preview",
                    "properties": {
                    "name": "[parameters('diagnosticsSettingName')]",
                    "eventHubAuthorizationRuleId": "[resourceId(parameters('diagnosticsEventHubResourceGroup'),'Microsoft.EventHub/namespaces/authorizationRules', parameters('diagnosticsEventHubNamespace'), parameters('diagnosticsEventHubAuthorizationRule'))]",
                    "logs": [
                        {
                        "category": "Deadlocks",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 0,
                            "enabled": false
                        }
                        },
                        {
                        "category": "Blocks",
                        "enabled": true,
                        "retentionPolicy": {
                            "days": 0,
                            "enabled": false
                        }
                        }
                        ],"metrics": [
                                  {
                                    "timeGrain": "PT1M",
                                    "enabled": true,                                    
                                    "retentionPolicy": {
                                      "enabled": false,
                                      "days": 0
                                    }
                                  }
                        ]
                    }
                }        
            ]
        },
        {
            "condition": "[parameters('enableADS')]",
            "apiVersion": "2017-03-01-preview",
            "type": "Microsoft.Sql/servers/securityAlertPolicies",
            "name": "[concat(parameters('serverName'), '/Default')]",
            "dependsOn": [
                "[concat('Microsoft.Sql/servers/', parameters('serverName'), '/databases/', parameters('databaseName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "disabledAlerts": [],
                "emailAddresses": [],
                "emailAccountAdmins": true
            }
        },
        {
            "condition": "[parameters('enableVA')]",
            "apiVersion": "2018-06-01-preview",
            "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
            "name": "[concat(parameters('serverName'), '/Default')]",
            "properties": {
                "storageContainerPath": "[if(parameters('enableVA'), concat(reference(variables('storageName'), '2018-02-01').primaryEndpoints.blob, 'vulnerability-assessment'), '')]",
                "storageAccountAccessKey": "[if(parameters('enableVA'), listKeys(variables('storageName'), '2018-02-01').keys[0].value, '')]",
                "recurringScans": {
                    "isEnabled": true,
                    "emailSubscriptionAdmins": true,
                    "emails": []
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Sql/servers/', parameters('serverName'), '/databases/', parameters('databaseName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Sql/servers/', parameters('serverName'), '/securityAlertPolicies/Default')]"
            ]
        }
    ],
    "variables": {
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroupName": "[resourceGroup().name]",
        "uniqueStorage": "[uniqueString(variables('subscriptionId'), variables('resourceGroupName'), parameters('serverLocation'))]",
        "storageName": "[tolower(concat('sqlva', variables('uniqueStorage')))]"
    }
}